swagger: "2.0"
info:
  description: |
    This is MyMusic API.
    Please get an Authorization Token and include it in authentication field before you make any requests.
  version: "1.0.0"
  title: MyMusic
  termsOfService: http://helloreverb.com/terms/
  contact:
    name: Spiros Kabasakalis
    email: kabasakalis@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: api.app.me:3000
basePath: /v1
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
  - application/vnd.siren+json
paths:
  /users:
    get:
      tags:
        - user
      summary: Finds all users
      description: Gets all users,paginated result.
      operationId: getAllUsers
      parameters:
        - in: query
          name: role
          description: Filter by role
          required: false
          type: string
          enum: ['user','admin','superadmin']
        - in: query
          name: id
          description: Filter by ids
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      security:
       - json_token: []
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        "404":
          description: Not Found
        "401":
          description: Unauthorized
        "500":
          description: Server Error
    post:
      tags:
        - user
      summary: Add a new user
      description: Only Admins and SuperAdmins can create users
      operationId: addUser
      parameters:
        - in: body
          name: body
          description: User to add.You can also create playlists for this user if you are authorized.
          required: false
          schema:
            $ref: "#/definitions/User"
      security:
       - json_token: []
      responses:
        "405":
          description: Invalid input
        "401":
          description: Unauthorized

  /users/{userId}:
    get:
      tags:
        - user
      summary: Find user by ID
      description: Returns a user
      operationId: getUserById
      parameters:
        - in: path
          name: userId
          description: ID of user that needs to be fetched
          required: true
          type: integer
          format: int64
      security:
       - json_token: []
      responses:
        "404":
          description: user not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid ID supplied
    put:
      tags:
        - user
      summary: Updates a user
      description: ""
      operationId: updateUser
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - in: path
          name: userId
          description: ID of user to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated attributes for user.
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        "405":
          description: Invalid input
        "404":
          description: user not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid ID supplied
      security:
        - json_token: []
    delete:
      tags:
        - user
      summary: Deletes a user
      description: ""
      operationId: deleteUser
      parameters:
        - in: path
          name: userId
          description: user id to delete
          required: true
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid user value
        "204":
          description: No Content. Successfully Deleted.
        "404":
          description: User not found
      security:
        - json_token: []
securityDefinitions:
  json_token:
    type: apiKey
    name: Authorization
    in: header
definitions:
  Auth:
    type: object
    properties:
      auth:
        type: object
        properties:
          email:
            type: string
          password:
            type: string

  User:
    type: object
    properties:
      user:
        type: object
        properties:
          name:
            type: string
            description: username
          email:
            type: string
            description: email
          password:
            type: string
            description: password (at least 8 characters)
          password_confirmation:
            type: string
            description: password confirmation
          role:
            type: string
            enum: ['user','admin','superadmin']
          playlists_attributes:
            description: playlists that this track belongs to
            type: array
            items:
              $ref: "#/definitions/PlaylistNested"
  UserNested:
    type: object
    properties:
      name:
        type: string
        description: username
      email:
        type: string
        description: email
      password:
        type: string
        description: password (at least 8 characters)
      password_confirmation:
        type: string
        description: password confirmation
      role:
        type: string
        enum: ['user','admin','superadmin']


  Genre:
    type: object
    properties:
      title:
        type: string
        description: Name of new Genre to add.
  Artist:
    type: object
    properties:
      artist:
        type: object
        properties:
          genre_id:
            type: integer
            format: int64
          title:
            type: string
            example: Myrath
            description: Name of band or album.
          country:
            type: string
            example: USA
            description: artist's country of origin.
          genre_attributes:
            $ref: "#/definitions/Genre"
          albums_attributes:
            description: artist's albums
            type: array
            items:
              $ref: "#/definitions/AlbumNested"
  ArtistNested:
    type: object
    properties:
      genre_id:
        type: integer
        format: int64
      title:
        type: string
        example: Myrath
        description: Name of band or artist.
      country:
        type: string
        example: USA
        description: artist's country of origin.
      genre_attributes:
        $ref: "#/definitions/Genre"
  Album:
    type: object
    properties:
      album:
        type: object
        properties:
          artist_id:
            type: integer
            format: int64
          title:
            type: string
          year:
            type: integer
            format: int32
          tracks_attributes:
            description: Tracks on this album
            type: array
            items:
              $ref: "#/definitions/TrackNested"
  AlbumNested:
    type: object
    properties:
      title:
        type: string
      year:
        type: integer
        format: int32
  Track:
    type: object
    properties:
      track:
        type: object
        properties:
          title:
            type: string
          time:
            type: string
          album_id:
            type: integer
            format: int64
          album_attributes:
            description: album this track belongs to
            $ref: "#/definitions/AlbumNested"
  TrackNested:
    type: object
    properties:
      title:
        type: string
      time:
        type: string
  Playlist:
    type: object
    properties:
      playlist:
        type: object
        properties:
          title:
            type: string
          user_id:
            type: integer
            format: int64
          tracks_attributes:
            description: tracks in this playlist
            type: array
            items:
              $ref: "#/definitions/Track"
          albums_attributes:
            description: albums in this playlist
            type: array
            items:
              $ref: "#/definitions/Album"
  PlaylistNested:
    type: object
    properties:
      title:
        type: string
      tracks_attributes:
        description: tracks in this playlist
        type: array
        items:
          $ref: "#/definitions/TrackNested"
      albums_attributes:
        description: albums in this playlist
        type: array
        items:
          $ref: "#/definitions/AlbumNested"
      user_attributes:
        $ref: "#/definitions/UserNested"







